h2. The Ruby Class Decorator (RCD) pattern is born!!!

I realized a while ago that I had come upon a very cool kind of "class decorator" design pattern that can be generalized to any 
gem that "decorates" a class (or perhaps multiple classes) with certain behavior. Gems such as _act_as_xxx_ come to mind fx.

I will soon try to generalize this pattern into a separate project and then have the gems _trole_, _troles_ and _trole_groups_ all 
use this to leverage their functionality. 
Also, I will make use of an idea that I just had while taking a cold shower (try it sometime if you have a mind block!). 
The idea is to have an internal default API, and an exposed API that by default is a reflection of the internal API. 
However the user is free to block parts of the API from being loaded or define his own external API that utilizes the inner API.

Since this is a general purpose decorator pattern, there should also be a kind of Index where you can see which decorators have 
been applied to an object and what API each such decorator exposes! Cool stuff!!!!

Some example usage:
<pre>
return if !User.has_decorator?(:troles_group)
# do some trole group stuff!!!

# later ...

# list all decorators currently applied to the User class
puts User.decorators

# print the methods of the public Write API for the :troles_group decorator :)
puts User.decorator(:troles_group).public_api(:write).methods.sort

# print the methods of the internal Write API for the :troles_group decorator :)
puts User.decorator(:troles_group).internal_api(:write).methods.sort
</pre>

I will use the new Decorator API very soon... sth like this:

<pre>
User.decorator(:trole_groups).configure(:strategy) :ref_one do |strategy|
  strategy.orm = :mongoid
  strategy.auto_load = true
end.configure!
</pre>

Awesome!

h2.

The idea is that you should be able to apply the behave pattern on a class:

<pre>
class User
  behave!
end
</pre>

This will add a #behavior collection at the class level, where each item is a Behave::Decorator instance. 
Each such Behave::Decorator instance has a Behave::Config object that configures it.

The Behave::Config encapsulates concepts such as storage, strategy etc. and can do schema/model configuration (using schemaker) etc.

<pre>
class User
  behave!

  behavior(:trole_groups).configure(:strategy) :ref_one do |strategy|
    strategy.orm = :mongoid
    strategy.auto_load = true
  end.configure!
end
</pre>

